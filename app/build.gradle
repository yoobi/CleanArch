plugins {
    id 'com.android.application'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'androidx.navigation.safeargs'
    id 'com.jraska.module.graph.assertion'
}
apply from: "$rootDir/android_base.gradle"

android {
    namespace AndroidConfig.applicationId
    defaultConfig {
        applicationId AndroidConfig.applicationId
    }
}

dependencies {
    implementation projects.appRes
    implementation projects.features.featureDashboard.ui
    implementation projects.features.featureDashboard.data

    implementation projects.core.fragmentUi

    implementation projects.features.featureSearch.ui

    implementation projects.features.featureRepository.data

    implementation Libraries.hiltAndroid
    kapt Libraries.hiltCompiler

    implementation Libraries.androidxNavigation
    implementation Libraries.androidxNavigationFragment

    implementation Libraries.retrofit
    implementation Libraries.retrofitMoshi
    implementation Libraries.retrofitAdapter

    implementation Libraries.androidxCore
    implementation Libraries.androidxAppCompat
    implementation Libraries.material
    implementation Libraries.androidxConstraintLayout
}

moduleGraphAssert {
    maxHeight = 5
    allowed = [
        ":app -> :.*",
        ":.* -> :app-res",
        ":features:.* -> :core:.*",
        ":features:feature-[a-z]*:data -> :features:feature-[a-z]*:domain",
        ":features:feature-[a-z]*:domain -> :features:feature-[a-z]*:domain",
        ":features:feature-[a-z]*:ui -> :features:feature-[a-z]*:(domain|ui)",
        ":features:feature-[a-z]*:ui -> :core:(fragment-ui|view)",
    ]
    restricted = [
        ":.* -X> :(app|moduleGenerator)",
        ":core:.* -X> :features:.*",
        ":app-res -X> :.*",
        ":features:feature-[a-z]*:(data|domain) -X> :core:(fragment-ui|view)",
        ":features:feature-[a-z]*:data -X> :features:feature-[a-z]*:(data|ui)",
        ":features:feature-[a-z]*:domain -X> :features:feature-[a-z]*:(data|ui)",
    ]
    assertOnAnyBuild = true
}

tasks.register("generateAppGraph") {
    Process process = "./appGraph.sh".execute()
    process.waitForProcessOutput(System.out, System.err)
}
