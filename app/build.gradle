plugins {
    alias libs.plugins.androidApplication
    alias libs.plugins.hiltAndroid
    alias libs.plugins.graphAssertion
    alias libs.plugins.safeArgsKtx
    alias libs.plugins.kotlinKapt
}
apply from: "$rootDir/android_base.gradle"

android {
    namespace project.applicationId
    defaultConfig {
        applicationId project.applicationId
    }
}

dependencies {
    implementation projects.appRes
    implementation projects.core.fragmentUi
    implementation projects.core.network

    implementation projects.features.featureDashboard.ui
    implementation projects.features.featureDashboard.data

    implementation projects.features.featureSearch.ui

    implementation projects.features.featureRepository.data

    implementation projects.features.featureRepositoryDetails.ui

    implementation libs.hiltAndroid
    kapt libs.hiltCompiler

    implementation libs.androidxNavigation
    implementation libs.androidxNavigationFragment

    implementation libs.retrofit
    implementation libs.retrofitMoshi
    implementation libs.retrofitAdapter

    implementation libs.androidxCore
    implementation libs.androidxAppCompat
    implementation libs.material
    implementation libs.androidxConstraintLayout
}

moduleGraphAssert {
    maxHeight = 5
    allowed = [
        ":app -> :.*",
        ":.* -> :app-res",
        ":features:.* -> :core:.*",
        ":features:feature-.*:data -> :features:feature-.*:domain",
        ":features:feature-.*:domain -> :features:feature-.*:domain",
        ":features:feature-.*:ui -> :features:feature-.*:domain",
        ":features:feature-.*:ui -> :features:feature-.*:ui",
        ":features:feature-.*:ui -> :core:(fragment-ui|view)",
    ]
    restricted = [
        ":.* -X> :(app|moduleGenerator)",
        ":core:.* -X> :features:.*",
        ":app-res -X> :.*",
        ":features:feature-.*:(data|domain) -X> :core:(fragment-ui|view)",
        ":features:feature-.*:data -X> :features:feature-.*:(data|ui)",
        ":features:feature-.*:domain -X> :features:feature-.*:(data|ui)",
    ]
    assertOnAnyBuild = true
}

tasks.register("generateAppGraph") {
    Process process = "./appGraph.sh".execute()
    process.waitForProcessOutput(System.out, System.err)
}
